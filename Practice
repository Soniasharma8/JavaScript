
// make a small todoList
let todoList = [
  { task: "study in JS", status: true },
  { task: "breakfast", status: false },
  { task: "lunch", status: false },
  { task: "dinner", status: true },
  { task: "evening walk", status: false },
  { task: "temple", status: true },
];

//add new one task
todoList.push({ task: "code practice", status: true });

//change value in one task
for (let i = 0; i < todoList.length; i++) {
  if (todoList[i].task === "dinner") {
    todoList[i].status = true;
  }
}
//remove one task
todoList = todoList.filter((t) => t.task !== "lunch");

//check completed Tasks
let completedTasks = todoList.filter((t) => t.status === true);

console.log("All Taska: ", todoList);
console.log("Only completd tasks: ", completedTasks);

/*
const name = "Sonia";
const repoCount = 50;

// console.log(name + repoCount + "Value");   not a good way to show the value

console.log(`Hello my name is ${name} and my repo count is ${repoCount}`);

const gameName = new String("sonia-sharma-com");
console.log(gameName[4]);

console.log(gameName.__proto__);

console.log(gameName.length);
console.log(gameName.toUpperCase());
console.log(gameName.charAt(2));
console.log(gameName.indexOf("a"));

const newString = gameName.substring(0, 4);
console.log(newString);

const anotherString = gameName.slice(-12, 7);
console.log(anotherString);

const newStringOne = "   Sonia Sharma   ";
console.log(newStringOne);
console.log(newStringOne.trim());

const url = "https://soniasharma.com";
console.log(url.replace("soniasharma", "sonia"));

console.log(url.includes("soniasharma"));

console.log(gameName.split("-"));

*/
/*
//Number and maths  in js

const score = 400;
console.log(score);

const balance = new Number(100);
console.log(balance);

console.log(balance.toString().length);
console.log(balance.toFixed(1));

const otherNumber = 2112.89;
console.log(otherNumber.toPrecision(4));


*/

/*
// Arrays in js

const myarr = [0, 1, 2, 3, 4, 5];
const myHeros = ["thor", "spiderman", "ironman"];

const myarr2 = new Array(1, 2, 3, 4, 5);
// console.log(myarr2[2]);

//array methhods

// myarr.push(6, 7, 8);
// myarr.pop(8);

// myarr.unshift(0);

// myarr.shift();

// console.log(myarr.includes(4));
// console.log(myarr.indexOf(4));

// const newArr = myarr.join();

// console.log(myarr);
// console.log(newArr);

// slice and Splice

// console.log("A ", myarr);
const myn1 = myarr.slice(1, 4); // original array ko manipulate nahi karta hai

// console.log(myn1);
// console.log("B ", myarr);

const myn2 = myarr.splice(1, 4); // original array ko manipulate karta hai
// console.log(myn2);

const marvel_hereos = ["thor", "spiderman", "ironman"];
const dc_hereos = ["superman", "flash", "batman"];
const all_hereos = marvel_hereos.concat(dc_hereos);
// console.log(all_hereos);

const all_new_hereos = [...marvel_hereos, ...dc_hereos];
// console.log(all_new_hereos);

const another_array = [1, 2, 3, [4, 5, 6], 7, [8, 9, 10, 11, 12, [13, 14, 15]]];

const real_another_array = another_array.flat(2); //flat me numbers dene hote hai kitni depth tak ise solve karu. (Infinity)
// console.log(real_another_array);
// output [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]  sari values spread out ho gai hai

console.log(Array.isArray("sonia")); // check karta hai ki koi value array hai ya nahi
console.log(Array.from("sonia")); // string ko array me convert karta hai

let score1 = 100;
let score2 = 200;
let score3 = 300;

console.log(Array.of(score1, score2, score3)); //ek naya array banata hai given elements se


*/

// objects

//Object literals

const mySym = Symbol("key1");

const JsUser = {
  name: "sonia",
  [mySym]: "myKey1",
  age: 22,
  email: "sonia@gmail",
  location: "india",
  isLoggedIn: false,
  lastLoginDays: ["monday", "tuesday", "wednesday", "thursday", "friday"],
};

// console.log(JsUser.email);
// console.log(JsUser.name);
// console.log(JsUser[mySym]);

JsUser.name = "sonia Sharma";
// console.log(JsUser);

// Object.freeze(JsUser);
JsUser.name = "Parul Garg";

JsUser.greeting = function () {
  console.log(`Hello Js USer, ${this.name}`);
};

// JsUser.greeting();

// const tinderUser = new Object(); // ye ek singleton object hai
const tinderUser1 = {}; // ye ek non singleton object hai

tinderUser1.id = "12qw";
tinderUser1.name = "Sonia";
tinderUser1.isLoggedIn = true;

// console.log(tinderUser1);

const regularUser = {
  email: "sonia12@gmail.com",
  fullname: {
    userfullname: {
      firstname: "sonia",
      lastname: "sharma",
    },
  },
};
// console.log(regularUser.fullname?.userfullname);

const obj1 = { 1: "a", 2: "b" };
const obj2 = { 3: "c", 4: "d" };
const obj3 = { ...obj1, ...obj2 }; // merge karta hai

// console.log(obj3);

// console.log(tinderUser1);

// console.log(Object.keys(tinderUser1));
// console.log(Object.values(tinderUser1));

const course = {
  coursename: "js in hindi",
  price: "999",
  courseInstructor: "sonia",
};

// course.courseInstructor

const { courseInstructor } = course;
// console.log(courseInstructor);

//function

function sayName() {
  console.log("s");
  console.log("o");
  console.log("n");
  console.log("i");
  console.log("a");
}

// sayName();

function addTwoNumbers(number1, number2) {
  console.log(number1 + number2);
}
// addTwoNumbers(3, 10);

function loginUserMessage(userName) {
  if (userName) {
    console.log(`${userName} just logged in`);
  } else {
    console.log("please enter a username");
  }
}
// loginUserMessage();



function calculateCartPrice(...num) {
  return num;
}
// console.log(calculateCartPrice(200, 400, 500, 2000));






//1.Square each number in an array

// let numbers = [1, 2, 3, 4, 5];
// let doubled = numbers.map(function (num) {
//   return num * num;
// });
// console.log(doubled);

//2. Convert an array of strings to uppercase

// let fruits = ["apple", "banana", "cherry"];
// let uppercasefruits = fruits.map(function (fruit) {
//   return fruit.toUpperCase();
// });
// console.log(uppercasefruits);

// let length = ["one", "eight", "three"];
// let lengths = length.map(function (word) {
//   return word.length;
// });
// console.log(lengths);

// 4. Add 10 to each number in an array

// let numbers = [10, 20, 30, 40, 50];
// let added = numbers.map(function (add) {
//   return add + 10;
// });
// console.log(added);

//5. Extract names from an array of user objects

// const users = [
//   { name: "Alice", age: 25 },
//   { name: "Bob", age: 30 },
// ];
// let age = users.map(function (userage) {
//   return userage.age;
// });
// console.log(age);

//6. Create HTML list items from an array of strings

// let items = ["Item 1", "Item 2", "Item 3"];
// let listItems = items.map(function (item) {
//   return `<li>${item}</li>`;
// });
// console.log(listItems.join(""));

// 7. Transform an array of numbers into an array of objects
// let numbers = [1, 2, 3, 4, 5];
// let objects = numbers.map(function (num) {
//   return { value: num };
// });
// console.log(objects);

// const numbers = ["1234567890", "0987654321", "1122334455"];
// const formattedNumbers = numbers.map(function (num) {
//   return num.replace(/(\d{3})(\d{3})(\d{4})/, "($1) $2-$3)");
// });
// console.log(formattedNumbers);

//Append index to string items
// const items = ["apple", "banana", "cherry"];
// const indexedItems = items.map(function (item, index) {
//   return `${index + 0}. ${item}`;
// });
// console.log(indexedItems);

/*const peoples = [
  { name: "Alice", lastname: "Smith" },
  { name: "Bob", lastname: "Johnson" },
  { name: "Charlie", lastname: "Brown" },
];

const fullnames = peoples.map(function (personal) {
  return `${personal.name} ${personal.lastname}`;
});
console.log(fullnames);

*/

// Promises

//🔍 Example: Synchronous

// console.log("Promises Example1");
// console.log("Promises Example2");
// console.log("Promises Example3");

// 🔄 Example: Asynchronous

// console.log("1");

// setTimeout(() => {
//   console.log("2");
// }, 2000);
// console.log("3");

//Example :

// const myPromise = new Promise((resolve, reject) => {
//   setTimeout(() => {
// resolve("Data Loaded");
//   }, 2000);
// });

// myPromise
//   .then((data) => {
// console.log(data);
//   })
//   .catch((error) => {
// console.error(error);
//   });

// 1. Create a simple promise that resolves after 2 seconds with the message "Hello World".

// const myPromise = new Promise((resolve, reject) => {
//   setTimeout(() => {
// resolve("Hello World");
//   }, 2000);
// });

// myPromise
//   .then((data) => {
// console.log(data);
//   })
//   .catch((error) => {
// console.error(error);
//   });

//2. Write a function delay(ms) that returns a promise which resolves after ms milliseconds.

// function delay(ms) {
//   return new Promise((resolve) => {
// setTimeout(() => {
//   resolve(`Done after ${ms}ms`);
// }, ms);
//   });
// }
// delay(2000).then((msg) => {
//   console.log(msg); // Output after 2 seconds: "Done after 2000ms"
// });

// 3. Simulate loading user data (e.g., return "User Loaded" after 1 second using a promise).

// function loadUserData() {
//   return new Promise((resolve) => {
//     setTimeout(() => {
//       resolve("User Loaded");
//     }, 1000);
//   });
// }
// loadUserData()
//   .then((data) => {
// console.log(data);
//   })
//   .catch((error) => {
//     console.error(error);
//   });

// function firstStep() {
//   return new Promise((resolve) => {
//     setTimeout(() => {
//       resolve("Step 1");
//     }, 1000);
//   });
// }

// firstStep()
//   .then((step1Result) => {
//     return `${step1Result} > Step 2`;
//   })
//   .then((finalResult) => {
//     console.log(finalResult);
//   });

// function checkNumber(num) {
//   return new Promise((resolve, reject) => {
//     if (num < 10) {
//       reject("Number is too small");
//     } else {
//       resolve("Valid");
//     }
//   });
// }

// checkNumber(5)
//   .then((msg) => {
//     console.log("Success:", msg);
//   })
//   .catch((err) => {
//     console.log("Error:", err);
//   });

// checkNumber(12)
//   .then((msg) => {
// console.log("Success:", msg);
//   })
//   .catch((err) => {
// console.log("Error:", err);
//   });

/*
fetch("https://jsonplaceholder.typicode.com/posts")
  .then((response) => {
    if (!response.ok) {
      throw new Error("Network response was not ok");
    }
    return response.json();
  })
  .then((data) => {
    console.log("user data:", data);
  })
  .catch((error) => {
    console.error("Fetch Error:", error.message);
  });

  */

/*
// async keyword

async function greet() {
  return "Hello";
}

greet().then((msg) => {
  console.log(msg);
});

*/


let num1 = 10;
let num2 = 10;

function 













/*

const accountId = 144553;
let accountEmail = "ss12@example.com";
var accountPassword = "123456";
accountCity = "Delhi";

// accountId = 2;
// console.log(accountId);

console.table([accountId, accountEmail, accountPassword, accountCity]);

// data types conversion confusions

//
// let score = "100";

console.log(typeof score);
console.log(typeof score);
let valueInNumber = Number(score);
console.log(typeof valueInNumber);

//
let isLoggedIn = 0.5;

let booleanLoggedIn = Boolean(isLoggedIn);
console.log(booleanLoggedIn);

//
let someNumber = 33;
let stringNumber = String(someNumber);
console.log(stringNumber);
console.log(typeof stringNumber);

//***********************************Operations***********************************//


/*
let value = 5;
let negValue = -value;
console.log(negValue);

//
let str1 = "Hello";
let str2 = " Sahiba";

let str3 = str1 + str2;
console.log(str3);

console.log("1" + 2);
console.log(1 + "2");

//
let gameCounter = 100;
gameCounter++;
console.log(gameCounter);

//***********************************Data types of js summary***********************************//

//   ## kis tarah se data ko memory me rakha jata hai or access kiya jata hai

//       Primitive data types: string, number, boolean, null, undefined, symbol
//      Non Primitive data types: arrays, objects

//    ## String : Call by value
//    ## Symbol : kisi bhi value ko unique banane ke liye use hota hai

//   ## Reference data types: arrays, objects, functions

//    ## Arrays : Call by reference

// const score = 100;
// const scoreValue = 100.3;

// const isLoggedIn = false;
// const outSideTemp = null;
// let userEmail;

// const id = Symbol("123");
// const anotherId = Symbol("123");

//

/*
const heros = ["thor", "spiderman", "ironman"];
let myobj = {
  name: "thor",
  power: "energy",
  realName: "thor odinson",
};

const myFunction = function () {
  console.log("hello world");
};
myFunction();
console.log(typeof heros);

//****************************************************************/

//   Stack Memory (Primitive) - jo bhi variable declare kia uska copy milta hai
//   Heap Memory (Non-Primitive) - jo bhi variable declare kia uska reference milta hai, original value me chnage hoga.


/*
let myName = "Sonia";
let anotherName = myName;
anotherName = "Priya";
console.log(myName);
console.log(anotherName);

let user1 = {
  email: "ss12@example.com",
  upi: "user@ybl",
};

let user2 = user1;
user2.email = "2d8Xe@example.com";
console.log(user1.email);
console.log(user2.email);
                                     
*/









/*
// Map uses

let numbers = [1, 2, 3, 4, 5];
let doubled = numbers.map(function (num) {
  return num * 2;
});
console.log(doubled);

//forEach uses
let names = ["Sonia", "Raj", "Priya"];
names.forEach(function (name) {
  console.log("Hello, " + name);
});



//find uses
let users = [
  { id: 1, name: "Sonia" },
  { id: 2, name: "Raj" },
  { id: 3, name: "Priya" },
];

let foundUser = users.find(function (user) {
  return user.id === 10;
});

console.log(foundUser);



//filter uses
let numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
let evenNumbers = numbers.filter(function(num) {
    return num % 2 === 0;
});
console.log(evenNumbers);
console.log(numbers);


//debouncing uses
let debounceTimer;
const callAPI = (query) => {
  console.log(`API Call For: ${query}`);
};
const handleSearchInput = (event) => {
  clearTimeout(debounceTimer);
  debounceTimer = setTimeout(() => {
    callAPI(event.target.value);
  }, 300);
};


//throttling uses
let isThrottled = false;

const handleScroll = () => {
  if (isThrottled) {
    return;
  }
  isThrottled = true;
  console.log("Scroll event handled");
  setTimeout(() => {
    isThrottled = false;
  },1000);
};



//objects uses
let car = {
  color: "red",
  model: "Toyota",
  year: 2020,
  start: function () {
    console.log("Car started");
  }
};
*/

// let car = new Object();
// car.color = "red";
// car["model"] = "Toyota";
// car["year"] = 2020;
// car.manufacturerYear = 2018;
// car.model = "Toyota";
// car.year = 2020;
// car.start = function () {
//   console.log(car.year);
// };
// console.log(car.start);
// {

//  color: "red",
//  model: "Toyota",
//  year: 2020,}
//  car.start();

/*

// Objects Example

//create a new object in user
let userProfile = {
  name: "John Doe",
  age: 30,
  email: "johndoe@gmail.com",
  isLoggedIn: true,
};
console.log("Original User Profile:", userProfile);
console.log("---");

//access the object properties
console.log("Users name:", userProfile.name);
console.log("Users email:", userProfile.email);
console.log("---");

//add new property
userProfile.city = "Delhi";
console.log("Upadted User City:", userProfile);
console.log("---");

//Update the existing property
userProfile.isLoggedIn = false;
console.log("After Logout:", userProfile);
console.log("---");

//create a new method to display a user's message
userProfile.greet = function () {
  console.log(`Hello, my name is ${this.name}!`);
};
userProfile.greet();

*/
/*


let shoppingCart = {
  items: [],

  //add Item method
  addItem: function (item) {
    this.items.push(item);
    console.log(`${item} has been added to the cart.`);
  },

  //calculate total method
  calculateTotal: function () {
    let total = 0;
    for (const item of this.items) {
      total += item.price * item.quantity;
    }
    return total;
}
};


*/

/*
//Promises Example
let myPromise = new Promise((resolve, reject) => {
  let isSuccess = false; // guessing the promise is successful
  if (isSuccess) {
    resolve("Promise resolved successfully!");
  } else {
    reject("Promise rejected!");
  }
});

//handle the promise
myPromise
  .then((message) => {
    console.log(message);
  })
  .catch((error) => {
    console.error(error);
  });


  */

/*

//Async //Await Example

//this function returns a promise that resolves after 2 seconds
function resolveAfter2Seconds() {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve("Resolved after 2 seconds");
    }, 2000);
  });
}

async function asyncFunction() {
  console.log("Waiting for promise to resolve...");
  const result = await resolveAfter2Seconds();
  console.log(result);
}
asyncFunction();

*/

// console.log("1");
// fetch("https://fakestoreapi.com/products/1")
//   .then((res) => res.json())
//   .then((json) => console.log(json));
//   const data= async () => {
//     const response = await fetch("https://fakestoreapi.com/products/1");
//     const json = await response.json();
//     console.log(json);
//   }
// data();
// setTimeout(() => {
//   console.log("2");
// }, 2000);
// console.log("3");
// console.log("4");
// console.log("5");
// console.log("6");
// console.log("7");
// console.log("8");
// console.log("9");

let object = {
  name: "Sonia",
  qualification: "BCA",
  age: 22,
};
console.log(object);
const map = new Map();
map.set("name", "Sonia");
map.set("qualification", "BCA");
map.set("age", 22);
console.log(map);
for (let i = 0; i < 100; i++) {
  if (i % 2 !== 0) console.log(i);
}

